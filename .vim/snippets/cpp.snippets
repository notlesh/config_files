# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
		public:
			$1 (${2:arguments});
			virtual ~$1 ();
	
		private:
			${3:/* data */}
	};

#accessors (with object type, using const-pass-by-reference)
snippet acco
	/**
	 * Sets $4
	 *
	 * @param $2 is the new value for $4
	 */
	void set${4:Name}( const ${1:Type}& ${2:name} ) { ${3:_$2} = $2; };

	/**
	 * Returns $4
	 *
	 * @return $4
	 */
	$1 get$4() const { return $3; };

#accessors (with primitive type, pass-by-value)
snippet acc
	/**
	 * Sets $4
	 *
	 * @param $2 is the new value for $4
	 */
	void set${4:Name}( ${1:Type} ${2:name} ) { ${3:_$2} = $2; };

	/**
	 * Returns $4
	 *
	 * @return $4
	 */
	$1 get$4() const { return $3; };

