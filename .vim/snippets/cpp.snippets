# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {

	public:

		/**
		 * Constructor
		 */
		$1();

		/**
		 * Destructor
		 */
		virtual ~$1();

	private:

	};

	${2}

#accessors (with object type, using const-pass-by-reference) (ACCessor Object-type Definition)
snippet accod
	/**
	 * Sets $3
	 *
	 * @param $2 is the new value for $3
	 */
	void set${3:Name}( const ${1:Type}& ${2:name} );

	/**
	 * Returns $3
	 *
	 * @return $3
	 */
	$1 get$3() const;

	${4}
#accessors (with primitive type, pass-by-value) (ACCessor Definition)
snippet accd
	/**
	 * Sets $3
	 *
	 * @param $2 is the new value for $3
	 */
	void set${3:Name}( ${1:Type} ${2:name} );

	/**
	 * Returns $3
	 *
	 * @return $3
	 */
	$1 get$3() const;

	${4}

# callback adder (CallBack Accessor Definition)
snippet cbad
	/**
	 * Adds a $1
	 *
	 * @param callback is the $1 to add
	 * @return Key of the callback, which can be used to remove it
	 */
	Key add$1( const ${1:Type}& callback );

	/**
	 * Remove a $1
	 *
	 * @param key is the Key returned when the $1 was added
	 */
	void remove$1( const Key& key );
	
	${2}

# callback adder (CallBack Accessor Implementation)
snippet cbai
	// add$1
	Key ${3:class_name}::add$1( const ${1:Type}& callback ) {
		return ${2:container_name}.add( callback );
	}

	// remove$1
	void $3::remove$1( const Key& key ) {
		$2.remove( key );
	}
	
	${4}
